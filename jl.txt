		参考
# 初始化仓库 
 mkdir	创建一个文件夹
 pwd	命令用于显示当前目录的路径
 touch config.txt	创建一个文件
 echo "xxx" >  config.txt	写东西到文件中
 echo "yyyy" >> config.txt
 cat config.txt		查看文件内容	
 sed -i "na 内容" 文件 (在某行查入东西)

# 版本回退
 git log --pretty=oneline 日志简洁
 git reset --hard HEAD^   回退到 (在Git中,用HEAD表示当前版本,上一个版本就是HEAD^,HEAD~100) 
 git reflog  记录你的每一次命令
 
# 管理修改 
 change readme.txt
 git add readme.txt
 change readme.txt
 git commit -m "提交" (第二次的修改没有被提交)
 git diff HEAD -- readme.txt  命令可以查看工作区和版本库里面最新版本的区别
 (每次修改,如果不用git add到暂存区,那就不会加入到commit中) 
 
# 撤销修改 
 git checkout -- file  想直接丢弃工作区的修改时 (没有--,就变成了“切换到另一个分支”的命令)
 git reset HEAD readme.txt  修改并添加到暂存区时,想丢弃修改回到了场景1，第二步按场景1操作。
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。
 
# 删除文件
 git rm test.txt  删除文件
 git commit -m "remove test.txt"  提交
 
 git checkout -- test.txt  把误删的文件恢复到最新版本
 
# 添加删除远程库 
 git remote add origin git@github.com:seawaveai/Remote.git(远程库的名字就是origin,这是Git默认的叫法,可以取名其他)
 git push -u origin master (第一次推送master分支时,加上了-u参数)
 
 git remote rm origin (删除已有的远程库)
 
 同时与多个远程库互相同步
 git remote add github git@github.com:michaelliao/learngit.git
 git remote add gitee git@gitee.com:liaoxuefeng/learngit.git
 git push github master
 git push gitee master
 
[使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，
但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。]

# 创建和合并分支 
 git branch 查看分支(当前分支前面会标一个*号)
 git branch <name> 创建分支
 git checkout <name> 切换分支
 ==git checkout -b <name>  创建+切换分支
 git merge <name> 合并某分支到当前分支
  (注意到上面的Fast-forward信息,Git告诉我们,这次合并是“快进模式”,也就是直接把master指向dev的当前提交,所以合并速度非常快)
 git branch -d <name> 删除分支

# 分支管理策略 
 git checkout -b dev 创建分支并修改文件,然后在切换到主分支
 git merge --no-ff -m "merge with no-ff" dev 
 说明:1.准备合并dev分支,请注意--no-ff参数,表示禁用Fast forward.
	  2.因为本次合并要创建一个新的commit,所以加上-m参数,把commit描述写进去.
 git log --graph
 git log --graph --pretty=oneline --abbrev-commit(看看分支历史)
 注意:合并分支时,加上--no-ff参数就可以用普通模式合并,合并后的历史有分支,能看出来曾经做过合并,而fast forward合并就看不出来曾经做过合并.

# bug分支
 ?当正在dev分支开发情况下,突然要去处理bug,当前代码还不能提交,就要把当前工作现场“储藏”起来.
 git stash 把当前工作现场“储藏”起来.
 git先确定要在哪个分支上修复bug,假定需要在master分支上修复,就从master创建临时分支.
 git处理bug,合并,删除.
 git stash list 查看工作现场存到哪去了.
 恢复的方式:
   1.git stash apply stash@{0}  恢复后，stash内容并不删除
	 git stash drop           用git stash drop来删除
   2.git stash pop   恢复的同时把stash内容也删了

  对次stash后,如何区分是哪次呢? 
   
# Feature分支   
   每添加一个新功能,最好新建一个feature分支.
   如果要丢弃一个没有被合并过的分支,可以通过git branch -D <name>强行删除.
   
# 多人协作/抓取分支   
 git remote -v  上面显示可以抓取和推送的origin的地址,如果没有推送权限就看不到push的地址.
 git push origin dev  推送其他分支,比如dev
 git clone git@github.com:michaelliao/learngit.git  默认情况下,只能看到本地的master分支
 git checkout -b dev origin/dev  若要在dev分支上开发,就必须创建远程origin的dev分支到本地
 git push origin dev	把dev分支push到远程
 git branch --set-upstream-to=origin/dev dev  pull失败原因是没有指定本地dev分支与远程origin/dev分支的链接
 
# 忽略
 git add App.class
 git add -f App.class 用-f强制添加到Git
 git check-ignore -v App.class 检查到底哪个规则写错了
 
# 别名
	--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用
 git config --global alias.st status 
 git config --global alias.last 'log -1'  git last 就能显示最近一次的提交
 git config --global alias.lg "log --color --graph --pretty=format:
 '%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
 
 git config --global alias.co checkout
 git config --global alias.ci commit
 git config --global alias.br branch
 git config --global alias.unstage 'reset HEAD'
 
 